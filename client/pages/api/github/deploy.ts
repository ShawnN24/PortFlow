import { Octokit } from '@octokit/rest';
import { Base64 } from 'js-base64';

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ message: 'Only POST allowed' });

  const { html, githubData, repoName, accessToken } = req.body;
  // Check for access token
  if (!accessToken) {
    return res.status(401).json({ message: 'Missing GitHub access token' });
  }

  const octokit = new Octokit({ auth: accessToken });
  const username = githubData.user.login;
  const siteUrl = `https://${username}.github.io/${repoName}`;
  const githubUrl = `https://github.com/${username}/${repoName}`;

  const readmeContent = `
# 🌐 PortFlow Portfolio

This is a custom portfolio site generated with [PortFlow]() — a platform for developers to easily create and deploy dynamic, personalized portfolios using their GitHub and Resume data.

## 🚀 Live Site

**[View Portfolio →](${siteUrl})**

## 📦 Generated From

This site was generated by **PortFlow**, using the following data:

- GitHub profile: [@${username}](https://github.com/${username})
- User-provided resume and input data

## 🛠 Customize Locally (Advanced)

If you'd like to clone and customize this portfolio manually:

\`\`\`bash
git clone https://github.com/${username}/portflow-portfolio.git
cd portflow-portfolio
npm install
npm run dev
\`\`\`

> You can also export and redeploy your portfolio any time using the PortFlow builder.
`;

  // Encode content
  const encodedIndex = Base64.encode(html);
  const encodedReadme = Base64.encode(readmeContent);

  if (!username) {
    return res.status(400).json({ message: 'GitHub username is missing or invalid' });
  }
  console.log('Deploying to:', { owner: username, repo: repoName });

  try {
    // Try to create repo (ignore if it already exists)
    try {
      await octokit.repos.createForAuthenticatedUser({
        name: repoName,
        private: false,
        auto_init: true,
      });
    } catch (e) {
      if (e.status === 422 && e.message.includes('name already exists')) {
        console.log('Repo already exists, continuing...');
      } else {
        throw new Error(`Failed to create repository: ${e.message}`);
      }
    }
    // Add Description
    await octokit.repos.update({
      owner: username,
      repo: repoName,
      description: '📦 My auto-generated portfolio built with PortFlow!',
      homepage: siteUrl,
    });

    // Overwrite index.html
    const indexPath = 'index.html';
    let shaIndex;
    try {
      const { data } = await octokit.repos.getContent({
        owner: username,
        repo: repoName,
        path: indexPath,
      });

      if (!Array.isArray(data)) shaIndex = data.sha;
    } catch (err) {
      if (err.status !== 404) throw err;
    }
    await octokit.repos.createOrUpdateFileContents({
      owner: username,
      repo: repoName,
      path: indexPath,
      message: 'Deploy index.html',
      content: encodedIndex,
      ...(shaIndex ? { sha: shaIndex } : {}),
    });

    // Overwrite README.md
    const readmePath = 'README.md';
    let shaReadme;
    try {
      const { data } = await octokit.repos.getContent({
        owner: username,
        repo: repoName,
        path: readmePath,
      });

      if (!Array.isArray(data)) shaReadme = data.sha;
    } catch (err) {
      if (err.status !== 404) throw err;
    }
    await octokit.repos.createOrUpdateFileContents({
      owner: username,
      repo: repoName,
      path: readmePath,
      message: 'Add README.md',
      content: encodedReadme,
      ...(shaReadme ? { sha: shaReadme } : {}),
    });

    // Enable GitHub Pages (create site)
    try {
      await octokit.request('POST /repos/{owner}/{repo}/pages', {
        owner: username,
        repo: repoName,
        source: {
          branch: 'main',
          path: '/',
        },
      });
    } catch (err) {
      if (err.status === 409) {
        // Pages already enabled, ignore error
        console.log('GitHub Pages already enabled for this repo.');
      } else {
        throw err;
      }
    }

    res.status(200).json({ message: `✅ Portfolio deployed successfully!\nView Repo at ${githubUrl}\nView Portfolio at ${siteUrl}`, siteUrl: siteUrl, githubUrl: githubUrl});
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: `Error deploying: ${err.message}` });
  }
}